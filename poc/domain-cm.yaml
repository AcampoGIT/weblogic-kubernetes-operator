apiVersion: v1
data:
  livenessProbe.sh: |
    #!/bin/bash
    # Kubernetes periodically calls this liveness probe script to determine whether
    # the pod should be restarted. The script checks a WebLogic Server state file which
    # is updated by the node manager.
    STATEFILE=${DOMAIN_HOME}/servers/${SERVER_NAME}/data/nodemanager/${SERVER_NAME}.state
    if [ `jps -l | grep -c " weblogic.NodeManager"` -eq 0 ]; then
      echo "Error: WebLogic NodeManager process not found."
      exit 1
    fi
    if [ -f ${STATEFILE} ] && [ `grep -c "FAILED_NOT_RESTARTABLE" ${STATEFILE}` -eq 1 ]; then
      echo "Error: WebLogic Server state is FAILED_NOT_RESTARTABLE."
      exit 1
    fi
    exit 0
  readState.sh: |
    #!/bin/bash

    # Reads the current state of a server. The script checks a WebLogic Server state
    # file which is updated by the node manager.

    STATEFILE=${DOMAIN_HOME}/servers/${SERVER_NAME}/data/nodemanager/${SERVER_NAME}.state

    if [ `jps -l | grep -c " weblogic.NodeManager"` -eq 0 ]; then
      echo "Error: WebLogic NodeManager process not found."
      exit 1
    fi

    if [ ! -f ${STATEFILE} ]; then
      echo "Error: WebLogic Server state file not found."
      exit 2
    fi

    cat ${STATEFILE} | cut -f 1 -d ':'
    exit 0
  readinessProbe.sh: |
    #!/bin/bash

    # Kubernetes periodically calls this readiness probe script to determine whether
    # the pod should be included in load balancing. The script checks a WebLogic Server state
    # file which is updated by the node manager.

    STATEFILE=${DOMAIN_HOME}/servers/${SERVER_NAME}/data/nodemanager/${SERVER_NAME}.state

    if [ `jps -l | grep -c " weblogic.NodeManager"` -eq 0 ]; then
      echo "Error: WebLogic NodeManager process not found."
      exit 1
    fi

    if [ ! -f ${STATEFILE} ]; then
      echo "Error: WebLogic Server state file not found."
      exit 2
    fi

    state=$(cat ${STATEFILE} | cut -f 1 -d ':')
    if [ "$state" != "RUNNING" ]; then
      echo "Not ready: WebLogic Server state: ${state}"
      exit 3
    fi
    exit 0
  start-server.py: |+
    import sys;
    #
    # +++ Start of common code for reading domain secrets

    # Read username secret
    file = open('/weblogic-operator/secrets/username', 'r')
    admin_username = file.read()
    file.close()
    print('admin_username=' + admin_username)

    # Read password secret
    file = open('/weblogic-operator/secrets/password', 'r')
    admin_password = file.read()
    file.close()
    print('admin_password=' + admin_password)

    # +++ End of common code for reading domain secrets
    #
    server_name = os.environ['SERVER_NAME']
    domain_uid = os.environ['DOMAIN_UID']
    domain_name = os.environ['DOMAIN_NAME']
    domain_home = os.environ['DOMAIN_HOME']
    admin_name = os.environ['ADMIN_NAME']
    admin_port = os.environ['ADMIN_PORT']

    print 'admin username is %s' % admin_username
    print 'admin password is %s' % admin_password
    print 'domain home is %s' % domain_home
    print 'server name is %s' % server_name
    if server_name != admin_name:
      admin_server_url='t3://' + domain_uid + '-' + admin_name + ':' + admin_port
      print 'admin server url is %s' % admin_server_url

    # Encrypt the admin username and password
    adminUsernameEncrypted=encrypt(admin_username, domain_home)
    adminPasswordEncrypted=encrypt(admin_password, domain_home)

    print 'Create boot.properties files for this server'

    # Define the folder path
    secdir='%s/servers/%s/security' % (domain_home, server_name)

    # Create the security folder (if it does not already exist)
    try:
      os.makedirs(secdir)
    except OSError:
      if not os.path.isdir(secdir):
        raise

    print 'writing boot.properties to %s/servers/%s/security/boot.properties' % (domain_home, server_name)

    bpFile=open('%s/servers/%s/security/boot.properties' % (domain_home, server_name), 'w+')
    # bpFile.write("username=%s\n" % adminUsernameEncrypted)
    # bpFile.write("password=%s\n" % adminPasswordEncrypted)
    bpFile.write("username=%s\n" % admin_username)
    bpFile.write("password=%s\n" % admin_password)
    bpFile.close()

    service_name = domain_uid + "-" + server_name

    # Connect to nodemanager and start server
    try:
      nmConnect(admin_username, admin_password, service_name,  '5556', domain_name, domain_home, 'plain')
      nmStart(server_name)
      nmDisconnect()
    except WLSTException, e:
      nmDisconnect()
      print e

    # Exit WLST
    exit()

  startServer.sh: |+
    #!/bin/bash

    local_nmdir=/u01/nodemanager

    # Create a folder
    # $1 - path of folder to create
    function createFolder {
      mkdir -m 777 -p $1
      if [ ! -d $1 ]; then
        fail "Unable to create folder $1"
      fi
    }

    # Function to create server specific scripts and properties (e.g startup.properties, etc)
    function createServerScriptsProperties() {
      local_nmdir=$1

      # Create startup.properties file
      datadir=${DOMAIN_HOME}/servers/${SERVER_NAME}/data/nodemanager
      stateFile=${datadir}/${SERVER_NAME}.state
      startProp=${datadir}/startup.properties
      if [ -f "$startProp" ]; then
        echo "startup.properties already exists"
        return 0
      fi

      createFolder ${datadir}
      echo "# Server startup properties" > ${startProp}
      echo "AutoRestart=true" >> ${startProp}
      if [ "${SERVER_NAME}" != "${ADMIN_NAME}" ]; then
        echo "AdminURL=http\://${DOMAIN_UID}-${ADMIN_NAME}\:${ADMIN_PORT}" >> ${startProp}
      fi
      echo "RestartMax=2" >> ${startProp}
      echo "RotateLogOnStartup=false" >> ${startProp}
      echo "RotationType=bySize" >> ${startProp}
      echo "RotationTimeStart=00\:00" >> ${startProp}
      echo "RotatedFileCount=100" >> ${startProp}
      echo "RestartDelaySeconds=0" >> ${startProp}
      echo "FileSizeKB=5000" >> ${startProp}
      echo "FileTimeSpanFactor=3600000" >> ${startProp}
      echo "RestartInterval=3600" >> ${startProp}
      echo "NumberOfFilesLimited=true" >> ${startProp}
      echo "FileTimeSpan=24" >> ${startProp}
      echo "NMHostName=${DOMAIN_UID}-${SERVER_NAME}" >> ${startProp}
    }

    # Function to create a local copy of the node manager home
    function createLocalNodeManagerHome() {
      local_nmdir=$1

      # Create nodemanager home directory that is local to the k8s node
      mkdir -p ${local_nmdir}

      # totally take control of the node manager configuration
      nm_props=${local_nmdir}/nodemanager.properties
      nm_domains=${local_nmdir}/nodemanager.domains

      echo "#Node manager properties" > ${nm_props}
      echo "DomainsFile=${nm_domains}" >> ${nm_props}
      echo "LogLimit=0" >> ${nm_props}
      echo "DomainsDirRemoteSharingEnabled=true" >> ${nm_props}
      echo "PropertiesVersion=12.2.1" >> ${nm_props}
      echo "AuthenticationEnabled=true" >> ${nm_props}
      echo "NodeManagerHome=${local_nmdir}" >> ${nm_props}
      echo "JavaHome=/usr/java/jdk1.8.0_151/Contents/Home" >> ${nm_props}
      echo "LogLevel=FINEST" >> ${nm_props}
      echo "DomainsFileEnabled=true" >> ${nm_props}
      echo "ListenAddress=${DOMAIN_UID}-${SERVER_NAME}" >> ${nm_props}
      echo "NativeVersionEnabled=true" >> ${nm_props}
      echo "ListenPort=5556" >> ${nm_props}
      echo "LogToStderr=true" >> ${nm_props}
      echo "weblogic.StartScriptName=startWebLogic.sh" >> ${nm_props}
      echo "SecureListener=false" >> ${nm_props}
      echo "LogCount=1" >> ${nm_props}
      echo "QuitEnabled=false" >> ${nm_props}
      echo "LogAppend=true" >> ${nm_props}
      echo "weblogic.StopScriptEnabled=false" >> ${nm_props}
      echo "StateCheckInterval=500" >> ${nm_props}
      echo "CrashRecoveryEnabled=true" >> ${nm_props}
      echo "weblogic.StartScriptEnabled=false" >> ${nm_props}
      echo "LogFile=${DOMAIN_LOGS}/nodemanager-${SERVER_NAME}.log" >> ${nm_props}
      echo "LogFormatter=weblogic.nodemanager.server.LogFormatter" >> ${nm_props}
      echo "ListenBacklog=50" >> ${nm_props}

      echo "#Domains and directories created by Configuration Wizard" > ${nm_domains}
      echo "${DOMAIN_NAME}=${DOMAIN_HOME}" >> ${nm_domains}

      cp ${DOMAIN_HOME}/bin/startNodeManager.sh ${local_nmdir}
      sed -i -e "s:${DOMAIN_HOME}/nodemanager:${local_nmdir}:g" ${local_nmdir}/startNodeManager.sh
    }

    # Check for stale state file and remove if found"
    if [ -f "$stateFile" ]; then
      echo "Removing stale file $stateFile"
      rm ${stateFile}
    fi

    # Create a node manager home local to this pod
    createLocalNodeManagerHome ${local_nmdir}
    export JAVA_PROPERTIES="-DLogFile=${DOMAIN_LOGS}/nodemanager-${SERVER_NAME}.log -DNodeManagerHome=${local_nmdir}"
    export NODEMGR_HOME="${local_nmdir}"

    # Create startup.properties
    echo "Create startup.properties"
    createServerScriptsProperties ${local_nmdir}

    echo "Start the nodemanager"
    . ${NODEMGR_HOME}/startNodeManager.sh &

    echo "Allow the nodemanager some time to start before attempting to connect"
    sleep 15
    echo "Finished waiting for the nodemanager to start"

    echo "Update JVM arguments"
    echo "Arguments=${USER_MEM_ARGS} -XX\:+UnlockExperimentalVMOptions -XX\:+UseCGroupMemoryLimitForHeap ${JAVA_OPTIONS}" >> ${startProp}

    echo "Start the server"
    wlst.sh -skipWLSModuleScanning /weblogic-operator/scripts/start-server.py ${DOMAIN_UID}

    cat ${DOMAIN_HOME}/servers/${SERVER_NAME}/security/boot.properties

    echo "Wait indefinitely so that the Kubernetes pod does not exit and try to restart"
    while true; do sleep 60; done

  stop-server.py: |+
    #
    # +++ Start of common code for reading domain secrets

    # Read username secret
    file = open('/weblogic-operator/secrets/username', 'r')
    admin_username = file.read()
    file.close()

    # Read password secret
    file = open('/weblogic-operator/secrets/password', 'r')
    admin_password = file.read()
    file.close()

    # +++ End of common code for reading domain secrets
    #
    server_name = os.environ['SERVER_NAME']
    domain_uid = os.environ['DOMAIN_UID']
    domain_name = os.environ['DOMAIN_NAME']
    domain_home = os.environ['DOMAIN_HOME']

    service_name = domain_uid + "-" + server_name

    # Connect to nodemanager and stop server
    try:
      nmConnect(admin_username, admin_password, service_name,  '5556', domain_name, domain_home, 'plain')
    except:
      print('Failed to connect to the NodeManager')
      exit(exitcode=2)

    # Kill the server
    try:
      nmKill(server_name)
    except:
      print('Connected to the NodeManager, but failed to stop the server')
      exit(exitcode=2)

    # Exit WLST
    nmDisconnect()
    exit()

  stopServer.sh: |+
    #!/bin/bash

    echo "Stop the server"

    wlst.sh -skipWLSModuleScanning /weblogic-operator/scripts/stop-server.py ${DOMAIN_UID}

    # Return status of 2 means failed to stop a server through the NodeManager.
    # Look to see if there is a server process that can be killed.
    if [ $? -eq 2 ]; then
      pid=$(jps -v | grep '[D]weblogic.Name=$2' | awk '{print $1}')
      if [ ! -z $pid ]; then
        echo "Killing the server process $pid"
        kill -15 $pid
      fi
    fi


kind: ConfigMap
metadata:
  labels:
    weblogic.createdByOperator: "true"
    weblogic.operatorName: poc-o-ns
    weblogic.resourceVersion: domain-v1
  name: weblogic-domain-cm
  namespace: poc-d-ns
