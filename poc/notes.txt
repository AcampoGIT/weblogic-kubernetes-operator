-----------------------------------------------------------------------------------------
setup
-----------------------------------------------------------------------------------------

  doublesync src122130 and devenv.sh
    (since we're going to use WLST to create the domain)

  mkdir -m 777 -p /scratch/k8s-dir
    (i.e. the parent directory for persistent volumes)

  make sure to get rid your old setup:
  (I had problems getting stuff to run until I got rid of this stuff)
    operator and domain namespaces
    persistent volumes
    cluster roles & cluster role bindings
    maybe /scratch/k8s_dir

-----------------------------------------------------------------------------------------
how to run a demo
-----------------------------------------------------------------------------------------
cd to the demo's directory & read its notes.txt

-----------------------------------------------------------------------------------------
poc source files
-----------------------------------------------------------------------------------------
  each demo describes its own files

  kit/
    represents the files in an operator kit

    -------------------------------------------------------------------------------------
    helm based
    -------------------------------------------------------------------------------------
    charts/
      the various charts mirroring the different lifecycle phases
      tbd - give more details

    runtime/
      scripts that simulate the operator runtime's functions
      currently only work with helm based setup

    -------------------------------------------------------------------------------------
    script-based (we'll remove this if we only need to support helm)
    (also, it's out of date w/ the helm setup)
    -------------------------------------------------------------------------------------

    templates/
      template yaml files that the customer must copy and customize

      utilities level:
        none (yet)

      kubernetes cluster level:
        operator-clusterrole.yaml - overall cluster role for the operator 
        operator-clusterrole-nonresource.yaml - overall nonresource cluster role for the operator 
        operator-clusterrole-namespace.yaml - overall namespace cluster role for the operator 
        kibana-dep.yaml - kibana deployment (needed for ELK integration)
        kibana-svc.yaml - kibana service (needed for ELK integration)
        elasticsearch-dep.yaml - kibana deployment (needed for ELK integration)
        elasticsearch-svc.yaml - kibana service (needed for ELK integration)

      operator level:

        operator-clusterrolebinding.yamlt - overall cluster role binding for the operator 
        operator-clusterrolebinding-auth-delegator.yamlt - auth delegator cluster role binding for the operator
        operator-clusterrolebinding-discovery.yamlt - discovery cluster role binding for the operator
        operator-clusterrolebinding-nonresource.yamlt - non resource cluster role binding for the operator
        operator-sa.yamlt - service account for the operator
        operator-cm.yamlt - config map containing the configuration for the operator
        operator-secrets.yamlt - config map containing the secrets for the operator
        operator-dep.yamlt - deployment for the operator
        operator-external-svc.yamlt - external node port for the operator
        operator-internal-svc.yamlt - internal cluster ip port for the operator
        operator-ns.yamlt - namespace for the operator

      domain namespace level:
        domain-cm.yamlt - template config map containing the operator's server pod lifecycle scripts
        operator-rolebinding.yaml - template role binding to let the operator access this domain namespace

      domain level:
        admin-server-pod.yamlt - admin server's pod template
        admin-server-service.yamlt - admin server's service template
        admin-server-t3-service.yamlt - admin server's t3 service template
        managed-server-pod.yamlt - managed server pod template
        managed-server-service.yamlt - managed server service template

        introspect-domain-pod.yamlt - pod template for introspecting the domain image
          validates that the domain can be used by the operator
          generates server and cluster topology info that the operator runtime needs
          create a situational configuration file binding the domain to the operator

    samples/
      sample template files that a customer may copy and customize

      utilities level:

        customize-property.sh
        customize.sh
          - scripts that expand/customize a template file
            the caller needs to have set up a bunch of environment variables
            containing the desired values (e.g. demo1/demoenv.sh)
          - the demos copy various templates from the kit/samples and kit/templates
            directories into the demos' 'generated' directories then use customize.sh
            to customize the copies to the demo

      domain namespace level:
        none (yet)

      domain level:
        create-domain-home-with-configured-cluster.sh
        create-domain-home-with-dynamic-cluster.sh
          - use offline wlst to create a local domain home
            it can be booted locally (i.e. no pod needed)

        patch-domain-home.sh
          - converts the domain home, java home and mw home pathnames that are baked into
            the files generated create-domain-home-...sh to the pathnames that are used
            when the domain home is used by a pod

        domain-logs-pv.yamlt
        domain-logs-pvc.yamlt
        domain-home-pv.yamlt
        domain-home-pvc.yamlt
          - template yaml files for creating the kubernetes persistent volumes and claims
            for the domain logs persistent volume and domain home persistent volume
          - samples that use in-image domains don't use domain-home-pv/c.yamlt

        start-server.sh
        stop-server.sh
        server-pod-desc.sh
        server-pod-state.sh
        server-pod-log.sh
        server-log.sh
        server-out.sh
        server-nm-log.sh
        server-nm-state.sh
        wait-for-server-to-start.sh as
          - template scripts for managing servers (see description under the 'demo1' section)

-----------------------------------------------------------------------------------------
poc generated files
-----------------------------------------------------------------------------------------

  each demo describes its own generated files
